#  #: 상위 카테고리, ##: 하위 카테고리, ###: Lint로 적용 불가능한 convention

only_rules:
# 코드 포맷
## 임포트
- unused_import
- sorted_imports

## 빈 줄
- trailing_newline

## 들여쓰기
### 탭(tab)은 4개의 space를 사용합니다.
### Xcode에서 제공하는 ^ + i 를 눌렀을 때, 적용되는 space를 사용합니다.

## 띄어쓰기
- colon
- comma
- operator_usage_whitespace
- return_arrow_whitespace
- operator_whitespace

## 줄바꿈
- multiline_parameters
- multiline_arguments
### guard, if let

## 기타
- line_length
- control_statement
- empty_enum_arguments
- opening_brace

# 네이밍
## 클래스
- type_name

## 함수
### 함수 이름에는 lowerCamelCase를 사용합니다.
### 함수 이름 앞에는 get을 붙이지 않습니다.
### Action 함수의 네이밍은 '주어 + 동사 + 목적어' 형태를 사용합니다.

## 변수 / 상수
#- identifier_name
# 변수 이름에는 lowerCamelCase를 사용합니다.
### 클래스 이름에는 접두사Prefix를 붙이지 않습니다.

## 열거형
### enum의 각 case에는 lowerCamelCase를 사용합니다.

## 약어
### 약어로 시작하는 경우 소문자로 표기하고, 그 외의 경우에는 항상 대문자로 표기합니다.

# 코드 스타일
## 클로저
- void_return
### Closure 정의시 파라미터에는 괄호를 사용하지 않습니다.
### Closure 정의시 가능한 경우 타입 정의를 생략합니다.
### Closure 호출시 Closure를 마지막 파라미터로 받는 경우, 파라미터 이름을 생략합니다.
- unused_closure_parameter
- closure_spacing

## 클래스와 구조체
### 클래스와 구조체 내부에서는 self를 명시적으로 사용합니다.
- legacy_constructor

## 타입
- syntactic_sugar

## 타입추론 사용
### 컴파일러가 문맥속에서 타입을 추론할 수 있으면 더 간결한 코드를 위해 타입을 생략합니다.

## self
### 문법의 모호함을 제거하기 위해 언어에서 필수로 요구하지 않는 이상 self는 사용하지 않습니다.

## 튜플
- large_tuple

## 패턴
### 프로퍼티의 초기화는 가능하면 init에서 합니다.

## 제네릭
- generic_type_name

## static
### 디폴트 타입 매소드는 static을 사용합니다.

## final
### 더 이상 상속이 발생하지 않는 클래스는 항상 final 키워드로 선언합니다.

## 프로토콜 extension
### 프로토콜을 적용할 때는 extension을 만들어서 관련된 매소드를 모아둡니다.

## switch-case
### switch-case에서 가능한 경우 default를 사용하지 않습니다.
### 새로운 case가 생성됐을때 인지하지 못한 상태에서 default로 처리되지 않고 의도적으로 처리를 지정해 주기 위함입니다.

## return
### return은 생략하지 않습니다.

## 사용하지 않는 코드
### Xcode가 자동으로 생성한 템플릿을 포함한 사용하지 않는 코드는 placeholder 코멘트를 포함해 모두 제거합니다.

# 주석
- comment_spacing
### 문서화에 /// 사용
- mark

# 프로그래밍 권장사항
### Then 사용

line_length:
 warning: 180
 error: 200

excluded:
- Pods
- SubCWPopup/AppDelegate.swift
- SubCWPopup/SceneDelegate.swift
