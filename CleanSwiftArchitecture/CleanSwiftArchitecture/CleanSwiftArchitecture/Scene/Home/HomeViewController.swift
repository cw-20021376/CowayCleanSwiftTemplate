//
//  HomeViewController.swift
//  CleanSwiftArchitecture
//
//  Created by cw-james on 2022/03/29.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Then

protocol HomeDisplayLogic: AnyObject {
    func displayPopup(viewModel: Home.ShowPopoup.ViewModel)
}

class HomeViewController: UIViewController {
    // MARK: - Variables
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        let worker = HomeWorker()
        let repository = PopupRepository(service: NetworkService.shared)
        
        viewController.interactor = interactor
        viewController.router = router
        
        worker.repository = repository
        
        interactor.presenter = presenter
        interactor.worker = worker
        
        presenter.viewController = viewController
        
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in
            self?.showPopup()
        }
    }
  
    // MARK: UI Components
    var activityIndicator: UIActivityIndicatorView!
  
    // MARK: - Do Somethings
    func showPopup() {
        let request = Home.ShowPopoup.Request(placement: "login")
        interactor?.requestPopup(request: request)
    }
}

// MARK: - DisplayLogic Protocol
extension HomeViewController: HomeDisplayLogic {
    func displayPopup(viewModel: Home.ShowPopoup.ViewModel) {
        let navigationBarHeight = self.navigationController?.navigationBar.frame.height ?? 0
        let frame = CGRect(x: 0, y: navigationBarHeight, width: self.view.bounds.width, height: self.view.bounds.height - navigationBarHeight)
        
        let popupListView = PopupListView(frame: frame, viewModel: viewModel)
        popupListView.delegate = self
        view.addSubview(popupListView)
        
        activityIndicator.stopAnimating()
    }
}

// MARK: - PopupListView Delegate
extension HomeViewController: PopupListViewDelegate {
    func didClickPopupButton(_ view: PopupListView, _ popup: Popup) {
        print("didselect")
        print(popup)
    }
}

// MARK: - UILayout
extension HomeViewController {
    func setupUI() {
        view.backgroundColor = .white
        
        setupActivity()
    }
    
    func setupActivity() {
        activityIndicator = UIActivityIndicatorView().then {
            view.addSubview($0)
            $0.style = .large
            $0.color = .darkGray
            $0.startAnimating()
        }
        
        activityIndicator.snp.makeConstraints {
            $0.centerX.centerY.equalToSuperview()
        }
    }
}
